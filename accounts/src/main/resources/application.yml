server:
  port: 8080

spring:
  application:
    name: accounts-service
  cloud:
    gcp:
#      credentials:
#        location: ${CREDENTIALS_FILE}
      datastore:
        enabled: true
        project-id: macro-scion-300810
  main:
    allow-bean-definition-overriding: true
  server:
    port: 8080

management:
  endpoints:
    web:
      exposure:
        include: health, prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
      sla:
        http:
          server:
            requests: 500ms, 1000ms, 2000ms, 4000ms
      percentiles:
        http:
          server:
            requests: 0.5, 0.9, 0.95, 0.99, 0.999
  endpoint:
    metrics:
      enabled: false
    prometheus:
      enabled: true


#Resilicience4j
resilience4j.retry:
  instances:
    habit-service:
      maxAttempts: 3
      waitDuration: 10s
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
      ignoreExceptions:
        - io.github.robwin.exception.BusinessException
    records-service:
      maxAttempts: 3
      waitDuration: 10s
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
      ignoreExceptions:
        - io.github.robwin.exception.BusinessException

resilience4j.bulkhead:
  instances:
    habit-service:
      maxConcurrentCalls: 10
    records-service:
      maxWaitDuration: 10ms
      maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
  instances:
    backendC:
      maxThreadPoolSize: 1
      coreThreadPoolSize: 1
      queueCapacity: 1

resilience4j.ratelimiter:
  instances:
    habit-service:
      limitForPeriod: 10
      limitRefreshPeriod: 1s
      timeoutDuration: 0
      registerHealthIndicator: true
      eventConsumerBufferSize: 100
    records-service:
      limitForPeriod: 6
      limitRefreshPeriod: 500ms
      timeoutDuration: 3s

resilience4j.timelimiter:
  instances:
    habit-service:
      timeoutDuration: 2s
      cancelRunningFuture: true
    records-service:
      timeoutDuration: 1s
      cancelRunningFuture: false